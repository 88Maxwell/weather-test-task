{"version":3,"sources":["components/Weather/WeatherWidgetRecord/WeatherWidgetRecord.js","components/Weather/WeatherWidgetRecord/index.js","domens/Weather/weatherPropTypes.js","components/Weather/WeatherWidget/WeatherWidget.js","components/Weather/WeatherWidget/index.js","components/Common/LoaderHelper/LoaderHelper.js","components/Common/LoaderHelper/index.js","hooks/usePosition.js","components/Weather/WeatherPage/WeatherPage.js","components/Weather/WeatherPage/index.js","domens/Common/createLoadableReducer.js","reducers/weather/current.js","actionTypes/weather.js","domens/Common/RequestClient.js","config.js","domens/Weather/weatherApi.js","actions/getWeather.js","containers/Weather/WeatherPageContainer.js","domens/Weather/constants.js","components/Common/StartPage/StartPage.js","components/Common/StartPage/index.js","containers/Common/StartPageContainer.js","components/Common/Routes/index.js","components/Common/Routes/Routes.js","components/Common/App/App.js","components/Common/App/index.js","reducers/weather/index.js","index.js","domens/Common/configureStore.js","reducers/index.js"],"names":["WeatherWidgetRecord","header","description","List","Item","size","Content","Header","Description","PropTypes","shape","lon","number","lat","oneOfType","object","arrayOf","id","main","string","icon","temp","pressure","humidity","temp_min","temp_max","speed","deg","all","type","message","sunrise","sunset","country","WeatherWidget","weather","wind","name","Segment","divided","LoaderHelper","data","state","LoadingComponent","ErrorComponent","DataComponent","propTypes","any","oneOf","node","isRequired","defaultProps","defaultSettings","enableHighAccuracy","timeout","Infinity","maximumAge","watch","settings","useState","position","setPosition","error","setError","onChange","coords","timestamp","latitude","longitude","accuracy","onError","err","useEffect","navigator","geolocation","watcher","watchPosition","getCurrentPosition","clearWatch","WeatherPage","weatherState","weatherError","onGetWeather","onGoBack","location","usePosition","search","city","qs","parse","slice","Grid","as","verticalAlign","padded","centered","Row","basic","Button","labelPosition","onClick","content","Loader","active","Message","negative","initialState","createLoadableReducer","requestActionType","successActionType","failureActionType","localInitialState","handleActions","payload","getRoot","current","getWeatherState","createSelector","getWeatherError","getWeather","RequestClient","apiUrl","prefix","queryObject","this","token","forEach","method","url","params","a","request","toUpperCase","body","query","queryString","stringify","fetchUrl","fetch","withCredentials","crossDomain","JSON","undefined","response","json","cod","process","common","publicUrl","openWeatherMap","REACT_APP_API_URL","REACT_APP_PREFIX","appid","REACT_APP_APP_ID","openweatherApiMapRequest","config","get","getweatherRequest","createAction","getweatherSuccess","getweatherFailure","q","dispatch","weatherApi","res","mapState","createStructuredSelector","withRouter","connect","getWeatherAction","goBack","cities","value","text","StartPage","warningVisible","setWarningVisible","onDismiss","warning","Dropdown","Menu","map","el","key","component","to","onOpenWeatherByCity","push","Routes","path","weatherPageContainer","StartPageContainer","App","history","store","combineReducers","createBrowserHistory","middlewares","thunk","routerMiddleware","rootReducer","router","connectRouter","configureRootReducer","createStore","compose","applyMiddleware","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fe647346.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { List } from \"semantic-ui-react\";\n\nfunction WeatherWidgetRecord({ header = \"header\", description = \"description,\" }) {\n    return (\n        <List.Item size=\"large\">\n            <List.Content>\n                <List.Header>{header}</List.Header>\n                <List.Description>{description}</List.Description>\n            </List.Content>\n        </List.Item>\n    );\n}\n\nWeatherWidgetRecord.propTypes = {\n    header      : PropTypes.string.isRequired,\n    description : PropTypes.string.isRequired\n};\n\nexport default WeatherWidgetRecord;\n","import WeatherWidgetRecord from \"./WeatherWidgetRecord\";\n\nexport default WeatherWidgetRecord;\n","/* eslint-disable camelcase */\nimport PropTypes from \"prop-types\";\n\nexport default {\n    coord : PropTypes.shape({\n        lon : PropTypes.number,\n        lat : PropTypes.number\n    }),\n    weather : PropTypes.oneOfType([\n        PropTypes.object,\n        PropTypes.arrayOf(\n            PropTypes.shape({\n                id          : PropTypes.number,\n                main        : PropTypes.string,\n                description : PropTypes.string,\n                icon        : PropTypes.string\n            })\n        )\n    ]),\n    base : PropTypes.string,\n    main : PropTypes.shape({\n        temp     : PropTypes.number,\n        pressure : PropTypes.number,\n        humidity : PropTypes.number,\n        temp_min : PropTypes.number,\n        temp_max : PropTypes.number\n    }),\n    visibility : PropTypes.number,\n    wind       : PropTypes.shape({\n        speed : PropTypes.number,\n        deg   : PropTypes.number\n    }),\n    clouds : PropTypes.shape({\n        all : PropTypes.number\n    }),\n    dt  : PropTypes.number,\n    sys : PropTypes.shape({\n        type    : PropTypes.number,\n        id      : PropTypes.number,\n        message : PropTypes.number,\n        sunrise : PropTypes.number,\n        sunset  : PropTypes.number,\n        country : PropTypes.string\n    }),\n    id   : PropTypes.number,\n    name : PropTypes.string,\n    cod  : PropTypes.number\n};\n","import React from \"react\";\nimport { List, Segment, Header } from \"semantic-ui-react\";\nimport WeatherWidgetRecord from \"../WeatherWidgetRecord\";\nimport weatherPropTypes from \"../../../domens/Weather/weatherPropTypes\";\n\nfunction WeatherWidget({ weather }) {\n    const { main, wind, name } = weather;\n\n    return (\n        <Segment>\n            <Header>{name}</Header>\n            <List divided>\n                <WeatherWidgetRecord header=\"temperature\" description={`${main.temp} ° F`} />\n                <WeatherWidgetRecord header=\"max temperature\" description={`${main.temp_max} ° F`} />\n                <WeatherWidgetRecord header=\"min temperature\" description={`${main.temp_min} ° F`} />\n                <WeatherWidgetRecord header=\"pressure\" description={`${main.pressure} atm`} />\n                <WeatherWidgetRecord header=\"wind speed\" description={`${wind.speed} m/s`} />\n                <WeatherWidgetRecord header=\"wind degree\" description={`${wind.deg} °`} />\n            </List>\n        </Segment>\n    );\n}\n\nWeatherWidget.propTypes = weatherPropTypes;\n\nexport default WeatherWidget;\n","import WeatherWidget from \"./WeatherWidget\";\n\nexport default WeatherWidget;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction LoaderHelper({\n    data, state, LoadingComponent, ErrorComponent = null, DataComponent\n}) {\n    return (\n        <>\n            {data && state === \"loaded\" && DataComponent}\n            {!data && state === \"loading\" && LoadingComponent}\n            {state === \"error\" && ErrorComponent}\n        </>\n    );\n}\n\nLoaderHelper.propTypes = {\n    // eslint-disable-next-line react/forbid-prop-types\n    data             : PropTypes.any,\n    state            : PropTypes.oneOf([ \"error\", \"loaded\", \"loading\" ]),\n    LoadingComponent : PropTypes.node.isRequired,\n    ErrorComponent   : PropTypes.node.isRequired,\n    DataComponent    : PropTypes.node.isRequired\n};\n\n\nLoaderHelper.defaultProps = {\n    data  : null,\n    state : null\n};\n\nexport default LoaderHelper;\n","import LoaderHelper from \"./LoaderHelper\";\n\nexport default LoaderHelper;\n","import { useState, useEffect } from \"react\";\n\nconst defaultSettings = {\n    enableHighAccuracy : false,\n    timeout            : Infinity,\n    maximumAge         : 0\n};\n\nexport default (watch = false, settings = defaultSettings) => {\n    const [ position, setPosition ] = useState(null);\n    const [ error, setError ] = useState(null);\n\n    const onChange = ({ coords, timestamp }) => {\n        setPosition({\n            latitude  : coords.latitude,\n            longitude : coords.longitude,\n            accuracy  : coords.accuracy,\n            timestamp\n        });\n    };\n\n    const onError = (err) => {\n        setError(err.message);\n    };\n\n    useEffect(() => {\n        if (!navigator || !navigator.geolocation) {\n            setError(\"Geolocation is not supported\");\n\n            return;\n        }\n\n        let watcher = null;\n\n        if (watch) {\n            watcher = navigator.geolocation.watchPosition(onChange, onError, settings);\n        } else {\n            navigator.geolocation.getCurrentPosition(onChange, onError, settings);\n        }\n\n        // eslint-disable-next-line consistent-return\n        return () => watcher && navigator.geolocation.clearWatch(watcher);\n    }, [ settings.enableHighAccuracy, settings.timeout, settings.maximumAge, settings, watch ]);\n\n    return { position, error };\n};\n","/* eslint-disable react/forbid-prop-types */\nimport React, { useEffect } from \"react\";\nimport qs from \"qs\";\nimport PropTypes from \"prop-types\";\nimport {\n    Grid, Loader, Message, Button, Segment\n} from \"semantic-ui-react\";\nimport WeatherWidget from \"../WeatherWidget\";\nimport LoaderHelper from \"../../Common/LoaderHelper\";\nimport usePosition from \"../../../hooks/usePosition\";\n\nfunction WeatherPage({\n    weatherState, weatherError, weather, onGetWeather, onGoBack, location\n}) {\n    const { position } = usePosition(false);\n    const { search } = location;\n    const { city } = qs.parse(search.slice(1));\n\n    useEffect(() => {\n        const { latitude: lat, longitude: lon } = position || {};\n\n        if (city) {\n            onGetWeather({ city });\n        } else {\n            onGetWeather({ lat, lon });\n        }\n    }, [ onGetWeather, city, position ]);\n\n\n    return (\n        <Grid as=\"main\" verticalAlign=\"middle\" padded centered>\n            <Grid.Row>\n                <Segment basic>\n                    <Button labelPosition=\"left\" onClick={onGoBack} icon=\"left chevron\" content=\"Back\" />\n                </Segment>\n            </Grid.Row>\n            <Grid.Row>\n                <LoaderHelper\n                    data={weather}\n                    state={weatherState}\n                    LoadingComponent={<Loader active />}\n                    DataComponent={<WeatherWidget weather={weather} />}\n                    ErrorComponent={(\n                        <Message negative>\n                            <Message.Header>Something happened wrong!</Message.Header>\n                            <p>{weatherError}</p>\n                        </Message>\n                    )}\n                />\n            </Grid.Row>\n        </Grid>\n    );\n}\n\nWeatherPage.propTypes = {\n    onGoBack     : PropTypes.func.isRequired,\n    onGetWeather : PropTypes.func.isRequired,\n    location     : PropTypes.object.isRequired,\n    weatherState : PropTypes.string,\n    weatherError : PropTypes.any,\n    weather      : PropTypes.object\n};\n\nWeatherPage.defaultProps = {\n    weatherState : null,\n    weatherError : null,\n    weather      : null\n};\n\nexport default WeatherPage;\n","import WeatherPage from \"./WeatherPage\";\n\nexport default WeatherPage;\n","import { handleActions } from \"redux-actions\";\n\nconst initialState = {\n    state : null, // 'loading', 'error', 'loaded'\n    error : null,\n    data  : null\n};\n\nexport default function createLoadableReducer({ requestActionType, successActionType, failureActionType }) {\n    const localInitialState = { ...initialState };\n\n    return handleActions(\n        {\n            [requestActionType] : (state) => ({\n                ...state,\n                state : \"loading\",\n                error : null\n            }),\n            [successActionType] : (state, { payload }) => ({ ...state, state: \"loaded\", data: payload }),\n            [failureActionType] : (state, { payload }) => ({ ...state, state: \"error\", error: payload })\n        },\n        localInitialState\n    );\n}\n","import { createSelector } from \"reselect\";\n\nimport { GET_WEATHER_SUCCESS, GET_WEATHER_REQUEST, GET_WEATHER_FAIL } from \"../../actionTypes/weather\";\n\nimport createLoadableReducer from \"../../domens/Common/createLoadableReducer\";\n\nexport default createLoadableReducer({\n    requestActionType : GET_WEATHER_REQUEST,\n    successActionType : GET_WEATHER_SUCCESS,\n    failureActionType : GET_WEATHER_FAIL\n});\n\nconst getRoot = (state) => state.weather.current;\n\nconst getWeatherState = createSelector(getRoot, (state) => state.state);\nconst getWeatherError = createSelector(getRoot, (state) => state.error);\nconst getWeather = createSelector(getRoot, (state) => state.data);\n\nexport { getWeatherState, getWeatherError, getWeather };\n","export const GET_WEATHER_SUCCESS = \"GET_WEATHER_SUCCESS\";\nexport const GET_WEATHER_REQUEST = \"GET_WEATHER_REQUEST\";\nexport const GET_WEATHER_FAIL = \"GET_WEATHER_FAIL\";\n","import queryString from \"query-string\";\n\nconst defaultApiUrl = \"http://localhost:3000/\";\nconst defaultApiPrefix = \"api/v1\";\n\nclass RequestClient {\n    constructor({ apiUrl = defaultApiUrl, prefix = defaultApiPrefix } = {}, queryObject = {}) {\n        this.queryObject = queryObject;\n        this.prefix = prefix;\n        this.apiUrl = apiUrl;\n        this.token = \"\";\n        [ \"get\", \"post\", \"patch\", \"delete\" ].forEach((method) => {\n            this[method] = async (url, data, params) => this.request({\n                method : method.toUpperCase(),\n                body   : data,\n                url,\n                params\n            });\n        });\n    }\n\n    async request({\n        url, method, body, params = {}\n    }) {\n        let queryObject = params;\n\n        if (this.queryObject) {\n            queryObject = { ...this.queryObject, ...params };\n        }\n        const query = `?${queryString.stringify(queryObject)}`;\n        const fetchUrl = `${this.apiUrl}/${this.prefix}${url}${query}`;\n        const response = await fetch(fetchUrl, {\n            method,\n            withCredentials : true,\n            crossDomain     : true,\n            body            : method !== \"GET\" ? JSON.stringify(body) : undefined\n        });\n\n        const json = await response.json();\n\n        if (+json.cod !== 200) {\n            throw json.message;\n        }\n\n        return json;\n    }\n}\n\nexport default RequestClient;\n","const {\n    REACT_APP_API_URL,\n    REACT_APP_PREFIX,\n    REACT_APP_APP_ID\n} = process.env;\n\nexport default {\n    common : {\n        publicUrl : process.env.PUBLIC_URL\n    },\n    openWeatherMap : {\n        apiUrl : REACT_APP_API_URL,\n        prefix : REACT_APP_PREFIX,\n        appid  : REACT_APP_APP_ID\n    }\n};\n","import RequestClient from \"../Common/RequestClient\";\nimport config from \"../../config\";\n\nconst openweatherApiMapRequest = new RequestClient(\n    {\n        apiUrl : config.openWeatherMap.apiUrl,\n        prefix : config.openWeatherMap.prefix\n    },\n    {\n        appid : config.openWeatherMap.appid\n    }\n);\n\nexport default {\n    getweather : (params) => openweatherApiMapRequest.get(\"/weather\", null, params)\n};\n","import { createAction } from \"redux-actions\";\nimport { GET_WEATHER_SUCCESS, GET_WEATHER_REQUEST, GET_WEATHER_FAIL } from \"../actionTypes/weather\";\nimport weatherApi from \"../domens/Weather/weatherApi\";\n\nexport const getweatherRequest = createAction(GET_WEATHER_REQUEST);\nexport const getweatherSuccess = createAction(GET_WEATHER_SUCCESS);\nexport const getweatherFailure = createAction(GET_WEATHER_FAIL);\n\nexport default function getWeather({ lat = 35, lon = 139, city: q = \"Kyiv\" }) {\n    return async (dispatch) => {\n        const data = {\n            lat,\n            lon,\n            q\n        };\n\n        dispatch(getweatherRequest(data));\n        try {\n            const res = await weatherApi.getweather(data);\n\n            dispatch(getweatherSuccess(res));\n\n            return res;\n        } catch (err) {\n            dispatch(getweatherFailure(err));\n\n            return null;\n        }\n    };\n}\n","import { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { withRouter } from \"react-router\";\nimport { goBack } from \"connected-react-router\";\nimport WeatherPage from \"../../components/Weather/WeatherPage\";\n\nimport { getWeatherState, getWeatherError, getWeather } from \"../../reducers/weather/current\";\nimport getWeatherAction from \"../../actions/getWeather\";\n\nconst mapState = createStructuredSelector({\n    weatherState : getWeatherState,\n    weatherError : getWeatherError,\n    weather      : getWeather\n});\n\nconst mapDispatch = (dispatch) => ({\n    onGetWeather : ({ lat, lon, city }) => dispatch(getWeatherAction({ lat, lon, city })),\n    onGoBack     : () => dispatch(goBack())\n});\n\nexport default withRouter(connect(mapState, mapDispatch)(WeatherPage));\n","export const cities = [\n    { value: \"Kyiv\", text: \"Kyiv\" },\n    { value: \"Lviv\", text: \"Lviv\" },\n    { value: \"Odesa\", text: \"Odesa\" },\n    { value: \"Kharkiv\", text: \"Kharkiv\" }\n];\n","/* eslint-disable react/forbid-prop-types */\nimport React, { useEffect, useState } from \"react\";\nimport qs from \"qs\";\nimport PropTypes from \"prop-types\";\nimport {\n    Grid, Loader, Message, Dropdown, Segment, Header\n} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport WeatherWidget from \"../../Weather/WeatherWidget\";\nimport usePosition from \"../../../hooks/usePosition\";\nimport LoaderHelper from \"../LoaderHelper\";\nimport { cities } from \"../../../domens/Weather/constants\";\n\nfunction StartPage({\n    weatherState, weatherError, weather, onGetWeather, location\n}) {\n    const { position } = usePosition(false);\n    const [ warningVisible, setWarningVisible ] = useState(true);\n\n    const { city } = qs.parse(location.search.slice(1));\n\n    useEffect(() => {\n        const { latitude: lat, longitude: lon } = position || {};\n\n        if (city) {\n            onGetWeather({ city });\n        } else {\n            onGetWeather({ lat, lon });\n        }\n    }, [ onGetWeather, city, position ]);\n\n    const handleDismissWarning = () => setWarningVisible(false);\n\n    return (\n        <Grid as=\"main\" verticalAlign=\"middle\" padded centered>\n            <Grid.Row>\n                {position ? (\n                    <LoaderHelper\n                        data={weather}\n                        state={weatherState}\n                        LoadingComponent={<Loader active />}\n                        DataComponent={<WeatherWidget weather={weather} />}\n                        ErrorComponent={(\n                            <Message negative>\n                                <Message.Header>Something happened wrong!</Message.Header>\n                                <p>{weatherError}</p>\n                            </Message>\n                        )}\n                    />\n                ) : (\n                    warningVisible && (\n                        <Message onDismiss={handleDismissWarning} warning>\n                            <Message.Header>Please enable geolocation!</Message.Header>\n                        </Message>\n                    )\n                )}\n            </Grid.Row>\n\n            <Grid.Row>\n                <Segment>\n                    <Header>Watch weather by city</Header>\n                    <Dropdown text=\"Choose an option\">\n                        <Dropdown.Menu>\n                            {cities.map((el) => (\n                                <Link\n                                    key={el.text}\n                                    component={Dropdown.Item}\n                                    to={`/weather?city=${el.value}`}\n                                >\n                                    {el.text}\n                                </Link>\n                            ))}\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Segment>\n            </Grid.Row>\n        </Grid>\n    );\n}\n\nStartPage.propTypes = {\n    onGetWeather : PropTypes.func.isRequired,\n    location     : PropTypes.object.isRequired,\n    weatherState : PropTypes.string,\n    weatherError : PropTypes.any,\n    weather      : PropTypes.object\n};\n\nStartPage.defaultProps = {\n    weatherState : null,\n    weatherError : null,\n    weather      : null\n};\n\nexport default StartPage;\n","import StartPage from \"./StartPage\";\n\nexport default StartPage;\n","import { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { withRouter } from \"react-router\";\nimport { push } from \"connected-react-router\";\nimport StartPage from \"../../components/Common/StartPage\";\n\nimport { getWeatherState, getWeatherError, getWeather } from \"../../reducers/weather/current\";\nimport getWeatherAction from \"../../actions/getWeather\";\n\nconst mapState = createStructuredSelector({\n    weatherState : getWeatherState,\n    weatherError : getWeatherError,\n    weather      : getWeather\n});\n\nconst mapDispatch = (dispatch) => ({\n    onGetWeather        : ({ lat, lon, city }) => dispatch(getWeatherAction({ lat, lon, city })),\n    onOpenWeatherByCity : ({ city }) => dispatch(push(`/weather?city=${city}`))\n});\n\nexport default withRouter(connect(mapState, mapDispatch)(StartPage));\n","import Routes from \"./Routes\";\n\nexport default Routes;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport weatherPageContainer from \"../../../containers/Weather/WeatherPageContainer\";\nimport StartPageContainer from \"../../../containers/Common/StartPageContainer\";\n\nexport default function Routes() {\n    return (\n        <Switch>\n            <Route path=\"/weather\" component={weatherPageContainer} />\n            <Route path=\"/\" component={StartPageContainer} />\n        </Switch>\n    );\n}\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport Routes from \"../Routes\";\n\nfunction App({ history, store }) {\n    return (\n        <Provider store={store}>\n            <ConnectedRouter history={history}>\n                <Routes />\n            </ConnectedRouter>\n        </Provider>\n    );\n}\n\nApp.propTypes = {\n    // eslint-disable-next-line react/forbid-prop-types\n    history : PropTypes.object.isRequired,\n    // eslint-disable-next-line react/forbid-prop-types\n    store   : PropTypes.object.isRequired\n};\n\nexport default App;\n","import App from \"./App\";\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport current from \"./current\";\n\nexport default combineReducers({ current });\n","import \"semantic-ui-css/semantic.min.css\";\nimport \"./index.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createBrowserHistory } from \"history\";\n\nimport App from \"./components/Common/App\";\nimport configureStore from \"./domens/Common/configureStore\";\n\nconst history = createBrowserHistory();\nconst store = configureStore({ history });\n\nReactDOM.render(<App store={store} history={history} />, document.getElementById(\"root\"));\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport configureRootReducer from \"../../reducers\";\n\nexport default function configureStoreGlobal({ history }) {\n    const middlewares = [ thunk ];\n\n    if (history) {\n        middlewares.push(routerMiddleware(history));\n    }\n\n    const rootReducer = configureRootReducer({ history });\n\n    return createStore(rootReducer, undefined, compose(applyMiddleware(...middlewares)));\n}\n","// eslint-disable-next-line import/prefer-default-export\nimport { combineReducers } from \"redux\";\nimport { connectRouter } from \"connected-react-router\";\nimport weather from \"./weather\";\n\nexport default ({ history }) => combineReducers({\n    router : connectRouter(history),\n    weather\n});\n"],"sourceRoot":""}